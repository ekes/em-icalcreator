<?php

/**
 * @file
 *  Working example replacement for events-manager ical template file.
 *  Normally placed in wp-content/themes/YOUR_THEME/plugins/events-manager/templates/ical.php
 */

/**
 * SUMMARY - iCal title https://tools.ietf.org/html/rfc2445#section-4.8.1.12
 *  This can be configured in /wp-admin/edit.php?post_type=event&page=events-manager-options#formats
 *  In the orginial this is described as the description, but that is not what is is used for.
 */
$summary_format = str_replace ( ">", "&gt;", str_replace ( "<", "&lt;", get_option ( 'dbem_ical_description_format' ) ) );

/**
 * DESCRIPTION - iCal body https://tools.ietf.org/html/rfc2445#section-4.8.1.5
 *  This will use the same token replacement format at the summary above. Tokens are listed on:
 *  /wp-admin/edit.php?post_type=event&page=events-manager-help#event-placeholders and
 *  /wp-admin/edit.php?post_type=event&page=events-manager-help#location-placeholders
 */
$description_format = '#_EVENTNOTES';

/**
 * Use RRULE - If you have repeating events and want to use a repeat rule in the feed;
 *   rather than having multiple events for each repeat in the feed.
 */
$use_rrule = TRUE;


// Set seen items array for rrule.
$seen_event_id = array();

// Get first round of events to show, we'll start adding more via the while loop.
if( ! empty($_REQUEST['event_id'])) {
	$EM_Events = array(em_get_event($_REQUEST['event_id']));
} else {
	$args = apply_filters(
		'em_calendar_template_args',
		array(
			'limit'=> '50',
			'page'=> '1',
			'owner'=> false,
			'orderby'=> 'event_start_date',
			'scope' => get_option('dbem_ical_scope'),
		)
	);
	$EM_Events = EM_Events::get( $args );
}

// Host name used later in UID and in PRODID.
$site = parse_url(get_option('siteurl'));
$host = $site['host'];
// New calendar.
$v = em_icalcreator_vcalendar(array('unique_id' => $host));
$v->setMethod('PUBLISH');

// TIMEZONE
$tz = get_option('timezone_string');
if ( ! $tz) {
	// If there is no timezone string use the offset on all dates later.
	$offset = get_option('gmt_offset');
}
else {
	$v->setConfig( 'TZID', $tz );
	$offset = NULL;
	$timezone = $v->newComponent( "vtimezone" );
	$timezone->setProperty( "tzid", $tz );
}

$count = 0;
while (count($EM_Events) > 0) {
	foreach ($EM_Events as $EM_Event) {

		if ( get_option('dbem_ical_limit') != 0 && $count > get_option('dbem_ical_limit') )
			break; //we've reached our maximum

		// RRULE - processing first if required so as to know if to skip this item.
		$rrule = array();
		if ( $use_rrule
			&& ($EM_Event->is_recurring() || $EM_Event->is_recurrence())
		) {
			// If this repeat has been seen and in ical feed do not enter it again.
			if ( isset($seen_event_id[$EM_Event->recurrence_id]) )
				continue;

			$repeat = $EM_Event->get_event_recurrence();

			$rrule = array(
				'FREQ' => $repeat->recurrence_freq,
				'INTERVAL' => $repeat->recurrence_interval,
			);
			if ( ! empty($repeat->end_date)) {
				$rrule['UNTIL'] = $repeat->end_date;
            }
			$day_lookup = array(
				1 => MO, 2 => TU, 3 => WE, 4 => TH, 5 => FR, 6 => SA, 7 => SU,
			);
			if ( 'weekly' == $repeat->recurrence_freq && ! empty($repeat->byday) ) {
				$days = explode(',', $repeat->byday);
				foreach ( $days as $day ) {
					$rrule['BYDAY'][] = array('DAY' => $day_lookup[$day]);
				}
			}
			if ( 'monthly' == $repeat->recurrence_freq && ! empty($repeat->byweekno) ) {
				$rrule['BYDAY'] = array($repeat->byweekno, array('DAY' => $day_lookup[$repeat->byday]));
			}
			// NOTE: Multiday event handling ['recurrence_days'] is not here.
			// Should be handled with DTSTART DTEND as with non-repeat events.

			$seen_event_id[$EM_Event->recurrence_id] = $EM_Event->recurrence_id;
		}

		// Add a new event.
		$event = $v->newComponent('vevent');
		// Inesrt RRULE if appropriate.
		if (! empty($rrule)) {
			$event->setProperty('rrule', $rrule);
		}

		// URL
		$url = $EM_Event->output('#_EVENTURL');
		$event->setProperty('url', $url);

		// UID
		// Presently auto generated by iCalcreator.

		$dateparam = array( 'VALUE' => $EM_Event->event_all_day ? 'DATE' : 'DATE-TIME');
		// DTSTART
		$event->setProperty('dtstart', em_icalcreator_datestamp2array($EM_Event->start, $EM_Event->event_all_day, $offset), $dateparam);

		// DTEND
		$dtend = $EM_Event->event_all_day ? $EM_Event->end + 86400 : $EM_Event->end; // Increment end by one day for all day events.
		$event->setProperty('dtend', em_icalcreator_datestamp2array($dtend, $EM_Event->event_all_day, $offset), $dateparam);

		// DTSTAMP
		if( ! empty($EM_Event->event_date_modified) && $EM_Event->event_date_modified != '0000-00-00 00:00:00' ) {
			$dtstamp = $EM_Event->event_date_modified;
		}
		else {
			$dtstamp = $EM_Event->post_modified;
		}
		$event->setProperty('dtstamp', $dtstamp);

		// SUMMARY
		$summary = $EM_Event->output($summary_format, 'ical');
		$event->setProperty('summary', $summary);

		// DESCRIPTION
		$description = $EM_Event->output($description_format, 'ical');
		if ( ! empty($description)) {
			$event->setProperty('description', $description);
		}

		// LOCATION
		$location = $EM_Event->output('#_LOCATION', 'ical');
		if ( ! empty($location)) {
			$event->setProperty('location', $location);
		}

		// GEO
		$long = $EM_Event->output('#_LOCATIONLONGITUDE', 'ical');
		$lat = $EM_Event->output('#_LOCATIONLATITUDE', 'ical');
		if ( $long != '' && $lat != ''
			&& $long != 0 && $lat != 0 ) { // Default location is 0,0 so ignoring that as well.
			$event->setProperty('geo', (float) $lat, (float) $long);
		}

		// CATEGORY
		$categories = array();
		$terms = wp_get_object_terms($EM_Event->post_id, array(EM_TAXONOMY_TAG, EM_TAXONOMY_CATEGORY));
		foreach ($terms as $term) {
            $name = sanitize_text_field($term->name);
			$categories[$name] = $name;
		}
		if ( ! empty($categories)) {
			$event->setProperty('categories', $categories);
		}


		$count++;
	}

	if ( ! empty($_REQUEST['event_id']) || (get_option('dbem_ical_limit') != 0 && $count > get_option('dbem_ical_limit'))) {
		// we've reached our limit, or showing one event only
		break;
	} else {
		// get next page of results
		$args['page']++;
		$EM_Events = EM_Events::get( $args );
	}
}

echo $v->createCalendar();
